apply plugin: 'maven-publish'
apply plugin: 'signing'

/**
 * Current module coordinate object which is chosen to be deployed.
 * */
// TODO rename `deployModuleName` to the target module for deployment.
def deployModuleName = "antipiracy"

// Do not edit this
def currentDeployModule = project.ext.get("module_${deployModuleName}")

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
    //archives javadocJar
}


group = currentDeployModule.PUBLISH_GROUP_ID
version = currentDeployModule.PUBLISH_VERSION


/**
 * If the local.properties file exists under the root project directory it will
 * be read to parse all the defined properties.
 *
 * Otherwise the system environment variables will be queried.
 *
 * Github secrets are mapped to env variables, therefore they will be retrieved
 * if this script is executed by github actions.
 * */

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
ext["stagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["stagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}


publishing {
    publications {
        release(MavenPublication) {
            groupId currentDeployModule.PUBLISH_GROUP_ID
            artifactId currentDeployModule.PUBLISH_ARTIFACT_ID
            version currentDeployModule.PUBLISH_VERSION
            
            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }
            
            artifact androidSourcesJar
            
            pom {
                name = currentDeployModule.PUBLISH_ARTIFACT_ID
                description = currentDeployModule.PUBLISH_ARTIFACT_DESC
                url = currentDeployModule.PUBLISH_ARTIFACT_WEBSITE
                
                licenses {
                    // TODO update license according to your project
                    license {
                        name = 'APACHE LICENSE'
                        url = 'https://github.com/cioccarellia/lib-template-android/blob/master/LICENSE.md'
                    }
                }
                
                developers {
                    // TODO update developer(s) data according to your project
                    developer {
                        id = 'cioccarellia'
                        name = 'Andrea Cioccarelli'
                        email = 'andrea.cioccarelli01@gmail.com'
                    }
                }
                
                scm {
                    // TODO update connection parameters according to your project
                    connection = 'scm:git:github.com/cioccarellia/lib-template-android.git'
                    developerConnection = 'scm:git:ssh://github.com/cioccarellia/lib-template-android.git'
                    url = 'https://github.com/cioccarellia/lib-template-android/tree/main'
                }
                
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    
                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

nexusStaging {
    packageGroup = currentDeployModule.PUBLISH_GROUP_ID
    stagingProfileId = sonatypeStagingProfileId
    username = ossrhUsername
    password = ossrhPassword
}

signing {
    sign publishing.publications
}